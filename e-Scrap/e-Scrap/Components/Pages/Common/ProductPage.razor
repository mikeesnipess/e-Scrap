@using eScrap.Models.Common
@using e_Scrap.Components.Pages.Filters
@using e_Scrap.Models
@inject IHttpClientFactory HttpClientFactory
@typeparam TProduct where TProduct : ProductModel

<h3 class="upper-name-products">Scraped @typeof(TProduct).Name Products</h3>

@if (loading)
{
    <p>Loading products, please wait...</p>
}
else if (Products != null && Products.Count > 0)
{
    <DropdownFilter T="TProduct"
    BrandNameProducts="@Products.Select(p => p.BrandName.ToUpper()).Distinct().ToList()"
    ShopNames="@Products.Select(p => GetShopNameFromId(p.ShopId)).Distinct().ToList()"
    OnSelectedBrandName="FilterByBrandName"
    OnSelectedShopName="FilterByShopName"
    OnMinPriceChanged="FilterByMinPrice"
    OnMaxPriceChanged="FilterByMaxPrice"
    IsOnlyDiscountActive="FilterByDiscount" />

    <hr class="category-divider" />

    <div class="show-products">
        @if (FilteredProducts.Count > 0)
        {
            var displayedProducts = FilteredProducts.Take(DisplayCount).ToList();

            @foreach (var product in displayedProducts)
            {
                var shopName = GetShopNameFromId(product.ShopId);

                <div class="show-product-card">
                    <img src="@product.ImageSmallUrl" alt="Image missing" class="product-image" />
                    <div class="product-details">
                        <h5 class="product-name">@product.Name</h5>
                        <p class="product-price"><strong>Price:</strong> @product.StandardPrice.ToString("C")</p>

                        @if (product.DiscountPercentage > 0)
                        {
                            <p class="discount-price"><strong>Discount Price:</strong> @product.DiscountPrice.ToString("C")</p>
                            <p class="discount-percentage"><strong>Discount:</strong> @product.DiscountPercentage%</p>
                        }
                        else
                        {
                            <p class="discount-price"><strong>Discount Price:</strong> @product.DiscountPrice.ToString("C")</p>
                            <p class="discount-percentage"><strong>Discount:</strong> @product.DiscountPercentage%</p>
                        }

                        <p><strong>Brand Name:</strong> @product.BrandName</p>
                        <p><strong>Shop:</strong> @shopName</p>
                        <p class="product-description"><strong>Description:</strong> @product.ProductDescription</p>
                        <a href="@product.LinkUrl" target="_blank" rel="noopener noreferrer" class="view-product-button">View Product</a>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No products found in the selected range...</p>
        }

        @if (DisplayCount < FilteredProducts.Count)
        {
            <button class="show-more-button" @onclick="ShowMoreProducts">Show More</button>
            <button class="show-all-button" @onclick="ShowAllProducts">Show All Products</button>
        }
    </div>


}
else
{
    <p>No products found.</p>
}

@code {
    [Parameter]
    public List<TProduct> Products { get; set; } = new();
    private readonly ProductFilter<TProduct> _productFilter = new();
    private List<TProduct> FilteredProducts { get; set; } = new();
    private bool loading = true;
    private List<ShopsModel> shopsModel = new();
    private string SelectedBrand { get; set; }
    private string SelectedShop { get; set; }
    private int? MinPriceFilter { get; set; }
    private int? MaxPriceFilter { get; set; }
    private bool IsDiscountView { get; set; }

    private int DisplayCount { get; set; } = 50;


    protected override async Task OnInitializedAsync()
    {
        Products = new();
        loading = true;

        var client = HttpClientFactory.CreateClient("API");
        var shops = await client.GetAsync("api/shop");
        shopsModel = await shops.Content.ReadFromJsonAsync<List<ShopsModel>>();

        loading = false;

        StateHasChanged();
    }

    private void ShowMoreProducts()
    {
        DisplayCount += 50;
        StateHasChanged();
    }

    private void ShowAllProducts()
    {
        DisplayCount = Products.Count();
        StateHasChanged();
    }


    private string GetShopNameFromId(Guid shopId)
    {
        return shopsModel.FirstOrDefault(s => s.Id == shopId)?.Name ?? "Unknown Shop";
    }


    public async Task<List<T>> GetDataAsync<T>(HttpClient client, string endpoint) where T : class
    {
        try
        {
            Console.WriteLine($"Making request to: {client.BaseAddress}{endpoint}");
            var response = await client.GetAsync(endpoint);

            response.EnsureSuccessStatusCode();

            var data = await response.Content.ReadFromJsonAsync<List<T>>();
            return data ?? new List<T>();
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"HTTP Error: {httpEx.Message}");
            throw;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected Error: {ex.Message}");
            throw;
        }
    }


    #region Filters
    private void FilterByBrandName(string selectedBrand)
    {
        SelectedBrand = selectedBrand;
        ApplyPriceFilter();
    }

    private void FilterByShopName(string selectedShop)
    {
        SelectedShop = selectedShop;
        ApplyPriceFilter();
    }

    private void FilterByMinPrice(int? minPrice)
    {
        MinPriceFilter = minPrice;
        ApplyPriceFilter();
    }

    private void FilterByMaxPrice(int? maxPrice)
    {
        MaxPriceFilter = maxPrice;
        ApplyPriceFilter();
    }

    private void FilterByDiscount(bool isDiscount)
    {
        IsDiscountView = isDiscount;
        ApplyPriceFilter();
    }

    private void ApplyPriceFilter()
    {
        IEnumerable<TProduct> filteredProducts = Products;

        filteredProducts = _productFilter.FilterByProperty(filteredProducts, p => p.BrandName, SelectedBrand);
        filteredProducts = _productFilter.FilterByProperty(filteredProducts, p => GetShopNameFromId(p.ShopId), SelectedShop);
        filteredProducts = _productFilter.FilterByPriceRange(filteredProducts, p => p.StandardPrice, MinPriceFilter, MaxPriceFilter);

        if (IsDiscountView)
        {
            filteredProducts = _productFilter.FilterByCondition(filteredProducts, p => p.DiscountPercentage > 0);
        }

        FilteredProducts = _productFilter.SortProducts(
            filteredProducts,
            p => IsDiscountView ? p.DiscountPercentage : (p.DiscountPercentage > 0 ? p.DiscountPrice : p.StandardPrice),
            true).ToList();

        DisplayCount = 50; // Reset the display count when a filter is applied
        StateHasChanged();
    }

    public class ProductFilter<T>
    {
        public IEnumerable<T> FilterByProperty(IEnumerable<T> products, Func<T, string> propertySelector, string selectedValue)
        {
            if (string.IsNullOrEmpty(selectedValue))
                return products;

            return products.Where(p => propertySelector(p).Equals(selectedValue, StringComparison.OrdinalIgnoreCase));
        }

        public IEnumerable<T> FilterByPriceRange(IEnumerable<T> products, Func<T, decimal> priceSelector, decimal? minPrice, decimal? maxPrice)
        {
            return products.Where(p =>
                (!minPrice.HasValue || priceSelector(p) >= minPrice.Value) &&
                (!maxPrice.HasValue || priceSelector(p) <= maxPrice.Value));
        }

        public IEnumerable<T> FilterByCondition(IEnumerable<T> products, Func<T, bool> condition)
        {
            return products.Where(condition);
        }

        public IEnumerable<T> SortProducts(IEnumerable<T> products, Func<T, object> sortKeySelector, bool descending = false)
        {
            return descending ? products.OrderByDescending(sortKeySelector) : products.OrderBy(sortKeySelector);
        }
    }
    #endregion
}
