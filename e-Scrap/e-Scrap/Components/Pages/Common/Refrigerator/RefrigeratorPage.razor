@page "/refrigerator"
@using e_Scrap.Components.Pages.Filters
@using e_Scrap.Models
@using e_Scrap.Models.Common
@using global::Models.Common.Refrigerator
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject ProductPage<RefrigeratorModel> _getData;
@rendermode InteractiveServer

<ProductPage TProduct="RefrigeratorModel" Products="@RefrigeratorProducts" />

@code {
    private bool loading = true;
    private List<RefrigeratorModel> RefrigeratorProducts = new();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var client = HttpClientFactory.CreateClient("API");
        RefrigeratorProducts.AddRange(await GetAltexRefrigeratorProductsAsync(client));
        RefrigeratorProducts.AddRange(await GetEMagRefrigeratorProductsAsync(client));
        RefrigeratorProducts.AddRange(await GetDedemanRefrigeratorProductsAsync(client));
        RefrigeratorProducts.AddRange(await GetMediaGalaxyRefrigeratorProductsAsync(client));

        loading = false;
        StateHasChanged();
    }

    #region ShopsAPI
    protected async Task<List<RefrigeratorModel>> GetAltexRefrigeratorProductsAsync(HttpClient client)
    {
        var endpoint = "AltexRefrigerator/ScrapeRefrigeratorAltexProducts";
        var products = await _getData.GetDataAsync<RefrigeratorModel>(client, endpoint);

        return products;
    }

    protected async Task<List<RefrigeratorModel>> GetEMagRefrigeratorProductsAsync(HttpClient client)
    {
        var endpoint = "eMagRefrigerator/eMagScrapeRefrigeratorProducts";
        var products = await _getData.GetDataAsync<RefrigeratorModel>(client, endpoint);

        return products;
    }

    protected async Task<List<RefrigeratorModel>> GetDedemanRefrigeratorProductsAsync(HttpClient client)
    {
        var endpoint = "DedemanRefrigerator/ScrapeRefrigeratorDedemanProducts";
        var products = await _getData.GetDataAsync<RefrigeratorModel>(client, endpoint);

        return products;
    }

    protected async Task<List<RefrigeratorModel>> GetMediaGalaxyRefrigeratorProductsAsync(HttpClient client)
    {
        var endpoint = "MediaGalaxyRefrigerator/ScrapeRefrigeratorMediaGalaxyProducts";
        var products = await _getData.GetDataAsync<RefrigeratorModel>(client, endpoint);

        return products;
    }
    #endregion
}