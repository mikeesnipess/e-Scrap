@page "/refrigerator"
@using AutoMapper
@using e_Scrap.Components.Pages.Filters
@using e_Scrap.Models
@using e_Scrap.Models.Common
@using global::Models.Common.Refrigerator
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject IMapper mapper;
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>Scraped Refrigerator Products</h3>

@if (loading)
{
    <p>Loading products, please wait...</p>
}
else if (RefrigeratorProducts != null && RefrigeratorProducts.Count > 0)
{
    <DropdownFilter BrandNameProducts="@RefrigeratorProducts.Select(p => p.BrandName).Distinct().ToList()"
                    OnSelected="FilterBrandNameRefrigeratorProducts" />
    <div class="product-list">
        @foreach (var product in FilteredRefrigerators)
        {
            var shopName = GetShopName(shopsModel, product.ShopId);

            <div class="product-card">
                <h5>@product.Name</h5>
                <img src="@product.ImageSmallUrl" alt="Lipseste imaginea" width="200" height="200" />
                <p><strong>Price:</strong> @product.StandardPrice.ToString("C")</p>

                @if (product.DiscountPercentage > 0)
                {
                    <p style="color: red"><strong>Discount Price:</strong> @product.DiscountPrice.ToString("C")</p>
                    <p style="color: red"><strong>Discount:</strong> @product.DiscountPercentage%</p>
                }
                else
                {
                    <p><strong>Discount Price:</strong> @product.DiscountPrice.ToString("C")</p>
                    <p><strong>Discount:</strong> @product.DiscountPercentage%</p>
                }

                <p><strong>Brand Name:</strong> @product.BrandName</p>
                <p><strong>Shop: </strong> @shopName</p>
                <p><strong>Description:</strong> @product.ProductDescription</p>
                <a href="@product.LinkUrl" target="_blank" rel="noopener noreferrer">View Product</a>
            </div>
        }
    </div>
}

else
{
    <p>No products found.</p>
}

@code {
    private bool loading = true;
    private List<RefrigeratorModel> RefrigeratorProducts = new();
    private List<RefrigeratorModel> FilteredRefrigerators = new();
    private List<ShopsModel> shopsModel = new();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var client = HttpClientFactory.CreateClient("API");
        var shops = await client.GetAsync("Shops/getShops");
        shopsModel = await shops.Content.ReadFromJsonAsync<List<ShopsModel>>();
        RefrigeratorProducts = await GetAltexRefrigeratorProductsAsync(client);
        RefrigeratorProducts.AddRange(await GetEMagRefrigeratorProductsAsync(client));
        RefrigeratorProducts = RefrigeratorProducts
            .Where(x => x.DiscountPrice >= 800 && x.DiscountPrice <= 1500)
            .OrderByDescending(x => x.DiscountPrice)
            .ToList();

        FilteredRefrigerators = RefrigeratorProducts;
        loading = false;
        StateHasChanged();
    }

    private void FilterBrandNameRefrigeratorProducts(string selectedBrand)
    {
        FilterProducts(
            RefrigeratorProducts,
            selectedBrand,
            product => product.BrandName,
            out FilteredRefrigerators
        );
        StateHasChanged();
    }

    private void FilterProducts<T>(IEnumerable<T> sourceProducts, string selectedValue, Func<T, string> propertySelector, out List<T> filteredProducts)
    {
        Console.WriteLine($"Filtering products by selected value: {selectedValue}");

        if (string.IsNullOrEmpty(selectedValue))
        {
            filteredProducts = sourceProducts.ToList();
        }
        else
        {
            filteredProducts = sourceProducts
                .Where(p => propertySelector(p).Equals(selectedValue, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    protected string GetShopName(List<ShopsModel> shopsModels, Guid shopId)
    {
        return shopsModel.FirstOrDefault(s => s.Id == shopId)?.Name ?? "Unknown Shop";
    }

    protected async Task<List<RefrigeratorModel>> GetAltexRefrigeratorProductsAsync(HttpClient client)
    {
        var endpoint = "AltexRefrigerator/ScrapeRefrigeratorAltexProducts";
        var products = await GetDataAsync<RefrigeratorModel>(client, endpoint);

        return products;
    }

    protected async Task<List<RefrigeratorModel>> GetEMagRefrigeratorProductsAsync(HttpClient client)
    {
        var endpoint = "eMagRefrigerator/eMagScrapeRefrigeratorProducts";
        var products = await GetDataAsync<RefrigeratorModel>(client, endpoint);

        return products;
    }

    protected async Task<List<T>> GetDataAsync<T>(HttpClient client, string endpoint) where T : class
    {
        try
        {
            var response = await client.GetAsync(endpoint);

            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<List<T>>();
                return data ?? new List<T>();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {response.StatusCode}, Content: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred while fetching data: {ex.Message}");
        }

        return new List<T>();
    }
}
