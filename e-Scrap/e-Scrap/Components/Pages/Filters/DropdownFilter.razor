@inject IJSRuntime JS
@rendermode InteractiveServer

<div>
    <label for="Products">Brand name filter</label>
    <select id="Products" @onchange="HandleSelectionChanged">
        <option value="">All Brands</option>
        @foreach (var product in BrandNameProducts.OrderBy(x => x))
        {
            <option value="@product">@product</option>
        }
    </select>
    <br />
    <label for="priceAverage">
        Set average price from Minimum:
        <input type="number" id="fromPrice" min="1" @bind-value="MinPrice" />
        to Maximum:
        <input type="number" id="toPrice" min="1" @bind-value="MaxPrice" />
        <input type="submit" value="Confirm" @onclick="ApplyPriceFilter" />
    </label>
    <br />
    <label for="isDiscount">
        Show only Discount?
        <input type="checkbox" id="verifyActivity" @bind="IsOnlyDiscount" @bind:event="onchange" />
    </label>
</div>

@code {
    [Parameter]
    public List<string> BrandNameProducts { get; set; }

    [Parameter]
    public EventCallback<string> OnSelectedBrandName { get; set; }

    [Parameter]
    public EventCallback<int?> OnMinPriceChanged { get; set; }

    [Parameter]
    public EventCallback<int?> OnMaxPriceChanged { get; set; }

    [Parameter]
    public EventCallback<bool> IsOnlyDiscountActive { get; set; }

    private int? MinPrice { get; set; }
    private int? MaxPrice { get; set; }
    private bool _isOnlyDiscount;
    private bool IsOnlyDiscount
    {
        get => _isOnlyDiscount;
        set
        {
            if (_isOnlyDiscount != value)
            {
                _isOnlyDiscount = value;
                IsDiscountActive();
            }
        }
    }

    private async Task HandleSelectionChanged(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();
        await OnSelectedBrandName.InvokeAsync(selectedValue);
    }

    private async Task ApplyPriceFilter()
    {
        await OnMinPriceChanged.InvokeAsync(MinPrice);
        await OnMaxPriceChanged.InvokeAsync(MaxPrice);
    }

    private async Task IsDiscountActive()
    {
        await IsOnlyDiscountActive.InvokeAsync(IsOnlyDiscount);
    }
}
