@page "/productsUltraRefrigerator"
@using global::Models.Ultra

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory

<h3>Scraped Products</h3>

@if (products != null && products.Count > 0)
{
    <ul>
        @* First, display products with a discount price *@
        @foreach (var product in products
       .Where(p => p.DiscountPrice > 0)
       .OrderBy(p => p.DiscountPrice) // Sort by Price in ascending order
       .ThenBy(p => p.DiscountPercentage))
        {
            <li>
                <a href="@product.Link" target="_blank">@product.Title</a> - Price: @product.Price || Discount Price: @product.DiscountPrice | Percentage: @product.DiscountPercentage
            </li>
        }

        @* Then, display products without a discount price *@
        @foreach (var product in products
       .Where(p => p.DiscountPrice == 0)
       .OrderBy(p => p.Price)) // Sort by Price in ascending order
        {
            <li>
                <a href="@product.Link" target="_blank">@product.Title</a> - Price: @product.Price
            </li>
        }
    </ul>
}
else
{
    <p>No products found or loading...</p>
}

@code {
    private List<UltraRefrigeratorModel> products = new List<UltraRefrigeratorModel>();

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("API");

        int startPage = 1;
        int endPage = 10;

        for (int page = startPage; page <= endPage; page++)
        {
            try
            {
                var pageProducts = await client.GetFromJsonAsync<List<UltraRefrigeratorModel>>($"UltraScraping/ScrapeRefrigeratorUltraProducts?page={page}");
                if (pageProducts != null && pageProducts.Count > 0)
                {
                    products.AddRange(pageProducts);
                }
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Request error for page {page}: {ex.Message}");
            }
        }

        // Sort the entire product list by price in ascending order
        products = products.OrderBy(p => p.Price).ToList();
    }
}
