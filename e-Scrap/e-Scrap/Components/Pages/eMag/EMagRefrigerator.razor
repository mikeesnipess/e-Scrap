@page "/refrigerator/EMag"
@using e_Scrap.Models
@using global::Models.Common.Refrigerator
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory

<h3>Scraped eMag Refrigerator Products</h3>

@if (loading)
{
    <p>Loading products, please wait...</p>
}
else if (products != null && products.Count > 0)
{
    <div class="product-list">
        @foreach (var product in products)
        {
            var shopName = GetShopName(shopsModel, product.ShopId);

            <div class="product-card">
                <h4>@product.Name</h4>
                <img src="@product.ImageSmallUrl" alt="Lipseste imaginea" width="200" height="200" />
                <p><strong>Price:</strong> @product.StandardPrice.ToString("C")</p>
                @if (product.DiscountPercentage > 0)
                {
                    <p style="color: red"><strong>Discount Price:</strong> @product.DiscountPrice.ToString("C")</p>
                    <p style="color: red"><strong>Discount:</strong>@product.DiscountPercentage.ToString("F2")%</p>
                }
                else
                {
                    <p><strong>Discount Price:</strong> @product.DiscountPrice.ToString("C")</p>
                    <p><strong>Discount:</strong> @product.DiscountPercentage.ToString("F2")%</p>
                }
                <p><strong>Brand Name:</strong> @product.BrandName</p>
                <p><strong>Shop: </strong> @shopName</p>
                <p><strong>Description:</strong> @product.ProductDescription</p>

                <a href="@product.LinkUrl" target="_blank" rel="noopener noreferrer">View Product</a>
            </div>
        }
    </div>
}
else
{
    <p>No products found.</p>
}

@code {
    private bool loading = true;
    private List<RefrigeratorModel> products = new();
    private List<ShopsModel> shopsModel = new();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var client = HttpClientFactory.CreateClient("API");
        var response = await client.GetAsync("eMagRefrigerator/eMagScrapeRefrigeratorProducts");
        var shops = await client.GetAsync("Shops/getShops");

        if (response.IsSuccessStatusCode)
        {
            products = await response.Content.ReadFromJsonAsync<List<RefrigeratorModel>>();
            products = products.OrderByDescending(x => x.DiscountPercentage)
                        .Where(x => x.DiscountPrice >= 800 && x.DiscountPrice <= 2300)
                        .ToList();
            shopsModel = await shops.Content.ReadFromJsonAsync<List<ShopsModel>>();
        }
        else
        {
            // Handle error response
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {response.StatusCode}, Content: {errorContent}");
        }

        loading = false;
    }
    protected string GetShopName(List<ShopsModel> shopsModels, Guid shopId)
    {
        return shopsModel.FirstOrDefault(s => s.Id == shopId)?.Name ?? "Unknown Shop";
    }
}
